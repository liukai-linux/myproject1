#include"speechManager.h"


SpeechManager::SpeechManager()
{
	this->initSpeech();//初始化属性

	this->creatSpeaker();//创建选手

	this->loadRecord();//获取往届记录
}

void SpeechManager::show_menu()
{
	cout << "********************************************" << endl; 
	cout << "************* 欢迎参加演讲比赛 ************" << endl; 
	cout << "*************  1.开始演讲比赛 *************" << endl; 
	cout << "*************  2.查看往届记录 *************" << endl; 
	cout << "*************  3.清空比赛记录 *************" << endl; 
	cout << "*************  0.退出比赛程序 *************" << endl; 
	cout << "********************************************" << endl; 
	cout << endl;
	
}
void SpeechManager::exitSystem()
{
	cout << "欢迎下次登陆！" << endl;
	system("pause");
	exit(0);
}

void SpeechManager::initSpeech()
{
	//容器保证为空
	this->v1.clear();
	this->v2.clear();
	this->v3.clear();
	this->m_Speaker.clear();
	//初始化比赛轮数
	this->m_index = 1;
	//初始化记录容器
	this->m_record.clear();
	
}
void SpeechManager::creatSpeaker()
{
	string nameSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < nameSeed.size(); i++)
	{
		string name = "选手";
		name += nameSeed[i];

		Speaker sp;
		sp.m_name = name;
		for (int i = 0; i < 2; i++)
		{
			sp.m_score[i] = 0;
		}
		//12名选手编号
		this->v1.push_back(i + 1001);

		//选手编号 以及对应的选手 存放到map容器中
		this->m_Speaker.insert(make_pair(i + 1001, sp));

	}

}
void SpeechManager::startSpeech()
{
	//第一轮比赛 
	
	//1、抽签 
	this->speechDraw();
	//2、比赛 
	this->speechContest();
	//3、显示晋级结果 
	this->showScore();

	//第二轮比赛 
	this->m_index++;
	//1、抽签 
	this->speechDraw();
	//2、比赛 
	this->speechContest();
	//3、显示最终结果 
	this->showScore();
	//4、保存分数
	this->saveRecord();

	//重置比赛
	//初始化属性
	this->initSpeech();
	//创建选手
	this->creatSpeaker();
	//获取往届记录
	this->loadRecord();

	cout << "本届比赛完毕！" << endl;

	system("pause");
	system("cls");
}
void SpeechManager::speechDraw()
{
	cout << "第<<" << this->m_index << ">>比赛选手抽签后顺序如下：" << endl;
	if (this->m_index == 1)
	{
		random_shuffle(v1.begin(), v1.end());
		for (vector<int>::iterator it = v1.begin();it != v1.end();it++)
		{
			cout << *it << "  ";
		}
		cout << endl;
	}
	else
	{
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << "  ";
		}
		cout << endl;
	}
	cout << "-------------------" << endl;
	system("pause");
	cout << endl;
}
void SpeechManager::speechContest()
{
	cout << "---------第" << this->m_index << "轮比赛正式开始！----------" << endl;

	multimap<double, int, greater<int>> groupSorce; //临时容器，保存key分数 value 选手编号

	int num = 0;
	vector<int> v_Str;
	if (this->m_index == 1)
	{
		v_Str = v1;
	}
	else
	{
		v_Str = v2;
	}

	for (vector<int>::iterator it = v_Str.begin();it != v_Str.end();it++)
	{
		num++;

		//评委打分
		deque<double> d;
		for (int i = 0; i < 10; i++)
		{
			double sorce = (rand() % 401 + 600) / 10.f;
			d.push_back(sorce);
		}
		sort(d.begin(), d.end(), greater<double>());//排序
		d.pop_back();//去掉最低分
		d.pop_front();//去掉最高分

		double sum = accumulate(d.begin(), d.end(),0.0f);
		double avg = sum / (double)d.size();

		this->m_Speaker[*it].m_score[this->m_index - 1] = avg;

		//6个人一组，用临时容器保存
		groupSorce.insert(make_pair(avg, *it));

		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<int>>::iterator it = groupSorce.begin(); it != groupSorce.end(); it++)
			{
				cout << "编号：" << it->second << "  姓名：" << this->m_Speaker[it->second].m_name
					<< "  成绩：" << this->m_Speaker[it->second].m_score[this->m_index - 1] << endl;
			}
			cout << endl;
			int count = 0;
			for (multimap<double, int, greater<int>>::iterator it = groupSorce.begin(); it != groupSorce.end() && count < 3; it++, count++)
			{
				if (this->m_index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					v3.push_back((*it).second);
				}
			}
			groupSorce.clear();
			cout << endl;
		}
	}
	cout << "-----------第<<" << this->m_index << ">>轮比赛结束-------------" << endl;
	system("pause");
}
void SpeechManager::showScore()
{
	cout << "第<<" << this->m_index << ">>轮的比赛晋级名单如下:" << endl;
	vector<int> v;
	if (this->m_index == 1)
	{
		v = v2;
	}
	else
	{
		v = v3;
	}

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "编号：" << *it << "  姓名：" << m_Speaker[*it].m_name << "  得分："
			<< m_Speaker[*it].m_score[this->m_index - 1] << endl;
	}
	cout << endl;

	system("pause");
	system("cls");
	this->show_menu();
}
void SpeechManager::saveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app);//用追加的方式打开文件 -- 写文件
	//将每个人数据写入到文件中
	for (vector<int>::iterator it = v3.begin(); it != v3.end(); it++)
	{
		ofs << *it << "," << m_Speaker[*it].m_score[1] << ",";
	}
	ofs << endl;
	ofs.close();

	cout << "记录已保存！" << endl;

	//更新记录为非空
	this->fileIsEmpty = false;
	
}
void SpeechManager::loadRecord()
{
	ifstream ifs("speech.csv",ios::in);//输入流对象 读取文件

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		//cout << "文件不存在！" << endl;
		ifs.close();
		return;
	}
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//cout << "文件为空！" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	this->fileIsEmpty = false;

	ifs.putback(ch);//读取的单个字符放回去

	string data;
	int index = 0;
	while (ifs >> data)
	{
		vector<string> v;
		int start = 0;
		int pos = -1;

		while (true)
		{
			pos = data.find(",", start);//从0开始查找 ','
			if (pos == -1)
			{
				break;
			}
			string temp = data.substr(start, pos - start);//找到了,进行分割 参数1 起始位置，参 数2 截取长度
			v.push_back(temp);
			start = pos + 1;
		}
		this->m_record.insert(make_pair(index, v));
		index++;
	}
	ifs.close();
	
}
void SpeechManager::showRecord()
{
	if (this->fileIsEmpty)
	{
		cout << "文件为空或不存在！" << endl;
	}
	else
	{
		for (int i = 0; i < this->m_record.size(); i++)
		{
			cout << "第" << i + 1 << "届" <<
				"  冠军编号：" << m_record[i][0] << "  分数：" << m_record[i][1] <<
				"  亚军编号：" << m_record[i][2] << "  分数：" << m_record[i][3] <<
				"  季军编号：" << m_record[i][4] << "  分数：" << m_record[i][5] << endl;
		}
	}
	
	system("pause");
	system("cls");
}
void SpeechManager::clearRecord()
{
	cout << "您确定要清空吗？" << endl;
	cout << "1.确定       2.取消" << endl;
	int select = 0;
	cin >> select;
	if (select == 1)
	{
		//打开模式 ios::trunc 如果存在删除文件并重新创建
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();

		this->initSpeech();//初始化属性

		this->creatSpeaker();//创建选手

		this->loadRecord();//获取往届记录

		cout << "清空成功！" << endl; 
	}
	system("pause");
	system("cls");
}
SpeechManager::~SpeechManager()
{

}